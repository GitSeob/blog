{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useRef, useCallback } from 'react';\nimport { ThumbnailBox } from './style';\nimport axios from 'axios';\n\nvar SetThumbnail = function SetThumbnail(_ref) {\n  var thumbnails = _ref.thumbnails,\n      tnIndex = _ref.tnIndex,\n      removeThumbnail = _ref.removeThumbnail,\n      setTnIndex = _ref.setTnIndex,\n      addThumbnail = _ref.addThumbnail;\n  var imageInput = useRef();\n  var onClickImageButton = useCallback(function () {\n    imageInput.current.click();\n  }, []);\n  var onChangeImg = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(e) {\n      var file, fileTypeRegex, formData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              file = e.target.files[0];\n\n              if (file) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              if (!(file.size > 1024 * 1024 * 10)) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 5:\n              fileTypeRegex = /^image\\/(.*?)/;\n\n              if (fileTypeRegex.test(file.type)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 8:\n              formData = new FormData();\n              _context.next = 11;\n              return formData.append('image', file);\n\n            case 11:\n              _context.next = 13;\n              return axios.post(\"/post/uploadImage\", formData).then(function (res) {\n                addThumbnail(res.data);\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), []);\n  return __jsx(ThumbnailBox, null, __jsx(\"div\", {\n    className: \"paddingBox\"\n  }), __jsx(\"div\", {\n    className: \"buttonBox\"\n  }, __jsx(\"div\", {\n    onClick: onClickImageButton\n  }, __jsx(\"input\", {\n    type: \"file\",\n    accept: \".gif, .jpg, .png\",\n    ref: imageInput,\n    onChange: onChangeImg,\n    style: {\n      display: 'none'\n    }\n  }), \"\\uD30C\\uC77C\\uCC3E\\uAE30\"), thumbnails.length > 0 && __jsx(\"div\", {\n    onClick: removeThumbnail\n  }, \"\\uC81C\\uAC70\\uD558\\uAE30\")), __jsx(\"div\", {\n    className: \"imageBox\",\n    style: {\n      transform: \"translateX(-\".concat(100 * tnIndex, \"%)\")\n    }\n  }, thumbnails && thumbnails.map(function (img, i) {\n    return __jsx(\"img\", {\n      key: i,\n      src: img\n    });\n  })), tnIndex > 0 && __jsx(\"button\", {\n    className: \"left\",\n    onClick: function onClick() {\n      setTnIndex(tnIndex - 1);\n    }\n  }, __jsx(\"img\", {\n    src: \"/arrow.svg\",\n    alt: \"\"\n  })), tnIndex < thumbnails.length - 1 && __jsx(\"button\", {\n    className: \"right\",\n    onClick: function onClick() {\n      setTnIndex(tnIndex + 1);\n    }\n  }, __jsx(\"img\", {\n    src: \"/arrow.svg\",\n    alt: \"\"\n  })));\n};\n\nexport default SetThumbnail;","map":null,"metadata":{},"sourceType":"module"}