{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport PostingForm from '@components/write/PostingForm';\nimport React, { useEffect, useState } from 'react';\nimport { PostingContainer } from './style';\nimport ConfirmPost from '@containers/write/ConfirmPost';\nimport useInput from '@hooks/useInput';\nimport PostBody from '@components/write/PostBody';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport DropImage from '@components/write/DropImage';\nimport Head from 'next/head';\nimport LoadingFilter from '@components/layout/LoadingFilter';\n\nvar Posting = function Posting(_ref) {\n  var _ref$post = _ref.post,\n      post = _ref$post === void 0 ? null : _ref$post;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      user = _useSelector.user;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      writeSuccess = _useSelector2.writeSuccess;\n\n  var loading = useSelector(function (state) {\n    return state.loading;\n  });\n  var router = useRouter();\n\n  var _useInput = useInput(post ? post.title : ''),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      title = _useInput2[0],\n      onChangeTitle = _useInput2[1];\n\n  var _useInput3 = useInput(post ? post.body : ''),\n      _useInput4 = _slicedToArray(_useInput3, 3),\n      body = _useInput4[0],\n      onChangeBody = _useInput4[1],\n      setBody = _useInput4[2];\n\n  var _useState = useState(''),\n      newImage = _useState[0],\n      setNewImage = _useState[1];\n\n  var uploadImage = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {\n      var fileTypeRegex, formData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (file) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              if (!(file.size > 1024 * 1024 * 10)) {\n                _context.next = 4;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 4:\n              fileTypeRegex = /^image\\/(.*?)/;\n\n              if (fileTypeRegex.test(file.type)) {\n                _context.next = 7;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 7:\n              formData = new FormData();\n              _context.next = 10;\n              return formData.append('image', file);\n\n            case 10:\n              _context.next = 12;\n              return axios.post(\"/post/uploadImage\", formData).then(function (res) {\n                setNewImage(\"![](\".concat(res.data, \")\"));\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function uploadImage(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onPasteImage = function onPasteImage(file) {\n    if (!file) return;\n    uploadImage(file);\n  };\n\n  useEffect(function () {\n    if (!user) {\n      router.back();\n    }\n\n    if (writeSuccess > -1) {\n      router.push(\"/post/\".concat(writeSuccess));\n    }\n  }, [writeSuccess]);\n  useEffect(function () {\n    if (newImage && body.indexOf(newImage) === -1) setBody(body + newImage);\n    return function () {\n      setNewImage('');\n    };\n  }, [body, newImage]);\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, post ? '글 수정' : '새 글')), loading.WRITE_POST_REQUEST && __jsx(LoadingFilter, null), __jsx(PostingContainer, null, __jsx(React.Fragment, null, __jsx(PostingForm, {\n    isEditingId: post ? post.id : 0,\n    category: post === null || post === void 0 ? void 0 : post.categoryPosts,\n    title: title,\n    onChangeTitle: onChangeTitle,\n    body: body,\n    onChangeBody: onChangeBody,\n    uploadImage: uploadImage\n  }), __jsx(DropImage, {\n    onPasteImage: onPasteImage\n  })), __jsx(PostBody, {\n    className: \"preview\",\n    title: title,\n    body: body\n  })), __jsx(ConfirmPost, {\n    title: title,\n    post: post\n  }));\n};\n\nexport var __N_SSP = true;\nexport default Posting;","map":null,"metadata":{},"sourceType":"module"}