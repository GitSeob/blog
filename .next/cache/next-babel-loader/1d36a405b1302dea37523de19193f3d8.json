{"ast":null,"code":"import axios from 'axios';\nimport { call, all, fork, takeLatest, put } from 'redux-saga/effects';\nimport { loadPostAsync, writePostAsync, removePostAsync } from '@reducers/post';\nimport { loadingEnd, loadingStart } from '@reducers/loading';\nimport { CLOSE_CONFIRM_POST } from '@reducers/posting';\n\nasync function removePostAPI(id) {\n  return await axios.delete(`/post/${id}`);\n}\n\nfunction* removePost(action) {\n  yield put(loadingStart(action.type));\n\n  try {\n    const result = yield call(removePostAPI, action.payload);\n    yield put(removePostAsync.success(result.data));\n  } catch (error) {\n    console.error(error);\n    yield put(removePostAsync.failure(error));\n  }\n\n  yield put(loadingEnd(action.type));\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(removePostAsync.request, removePost);\n}\n\nasync function writePostAPI(postData) {\n  if (postData.isEditingId) {\n    return await axios.patch(`/post/${postData.isEditingId}`, postData);\n  } else {\n    return await axios.post(`/post`, postData);\n  }\n}\n\nfunction* writePost(action) {\n  yield put(loadingStart(action.type));\n\n  try {\n    const result = yield call(writePostAPI, action.payload);\n    result.data.isEdited = true;\n    yield put(writePostAsync.success(result.data));\n  } catch (error) {\n    console.error(error);\n    yield put({\n      type: CLOSE_CONFIRM_POST\n    });\n    yield put(writePostAsync.failure(error));\n  }\n\n  yield put(loadingEnd(action.type));\n}\n\nfunction* watchWritePost() {\n  yield takeLatest(writePostAsync.request, writePost);\n}\n\nasync function loadPostAPI(id) {\n  return await axios.get(`/post/${id}`);\n}\n\nfunction* loadPost(action) {\n  yield put(loadingStart(action.type));\n\n  try {\n    const result = yield call(loadPostAPI, action.payload);\n    yield put(loadPostAsync.success(result.data));\n  } catch (error) {\n    console.error(error);\n    yield put(loadPostAsync.failure(error));\n  }\n\n  yield put(loadingEnd(action.type));\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(loadPostAsync.request, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchWritePost), fork(watchRemovePost)]);\n}","map":null,"metadata":{},"sourceType":"module"}