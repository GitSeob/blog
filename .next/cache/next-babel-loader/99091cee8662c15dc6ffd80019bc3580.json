{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Posting from './index';\nimport wrapper from '@store/configureStore';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport { LOAD_USER_REQUSET } from '@reducers/user';\nimport { useSelector } from 'react-redux';\nimport { LOAD_POST_REQUEST } from '@reducers/post';\nimport DefaultErrorPage from 'next/error';\nimport { useRouter } from 'next/router';\n\nconst ExistingPost = () => {\n  const {\n    post,\n    isEditedPost\n  } = useSelector(state => state.post);\n  const router = useRouter();\n  useEffect(() => {\n    if (isEditedPost) {\n      alert('게시물이 수정되었습니다.');\n      router.push(`/post/${post.id}`);\n    }\n  }, [isEditedPost]);\n  if (post) return __jsx(Posting, {\n    post: post\n  });else return __jsx(DefaultErrorPage, {\n    statusCode: 404\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  var _context$params;\n\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_REQUSET\n  });\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    payload: (_context$params = context.params) === null || _context$params === void 0 ? void 0 : _context$params.id\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  return {\n    props: {\n      category: context.query.category ? context.query.category : ''\n    }\n  };\n});\nexport default ExistingPost;","map":null,"metadata":{},"sourceType":"module"}