{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducer, createAsyncAction } from 'typesafe-actions';\nconst initialState = {\n  Category: [],\n  posts: [],\n  numberOfPosts: 0,\n  isLoaddingPosts: false,\n  loadPostsErrorReason: null,\n  EndOfPosts: false\n};\nexport const LOAD_POSTS_REQUEST = 'posts/LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'posts/LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'posts/LOAD_POSTS_FAILURE';\nexport const LOAD_CATEGORIES_REQUEST = 'posts/LOAD_CATEGORIES_REQUEST';\nexport const LOAD_CATEGORIES_SUCCESS = 'posts/LOAD_CATEGORIES_SUCCESS';\nexport const LOAD_CATEGORIES_FAILURE = 'posts/LOAD_CATEGORIES_FAILURE';\nexport const LOAD_SEARCH_REQUEST = 'posts/LOAD_SEARCH_REQUEST';\nexport const LOAD_SEARCH_SUCCESS = 'posts/LOAD_SEARCH_SUCCESS';\nexport const LOAD_SEARCH_FAILURE = 'posts/LOAD_SEARCH_FAILURE';\nexport const loadPostsAsync = createAsyncAction(LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE)();\nexport const loadCategoriesAsync = createAsyncAction(LOAD_CATEGORIES_REQUEST, LOAD_CATEGORIES_SUCCESS, LOAD_CATEGORIES_FAILURE)();\nconst actions = {\n  loadPostsAsync,\n  loadCategoriesAsync\n};\nconst postsReducer = createReducer(initialState, {\n  [LOAD_POSTS_REQUEST]: state => _objectSpread(_objectSpread({}, state), {}, {\n    isLoaddingPosts: true\n  }),\n  [LOAD_POSTS_SUCCESS]: (state, {\n    payload\n  }) => _objectSpread(_objectSpread({}, state), {}, {\n    isLoaddingPosts: false,\n    posts: state.posts.concat(payload.data),\n    EndOfPosts: payload.data.length !== 8\n  }),\n  [LOAD_POSTS_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread(_objectSpread({}, state), {}, {\n    isLoaddingPosts: false,\n    loadPostsErrorReason: error.response ? error.response.data : 'Error!'\n  }),\n  [LOAD_CATEGORIES_REQUEST]: state => _objectSpread({}, state),\n  [LOAD_CATEGORIES_SUCCESS]: (state, {\n    payload\n  }) => _objectSpread(_objectSpread({}, state), {}, {\n    Category: payload.data.categories,\n    numberOfPosts: payload.data.numberOfPosts\n  }),\n  [LOAD_CATEGORIES_FAILURE]: (state, {\n    payload: error\n  }) => _objectSpread({}, state)\n});\nexport default postsReducer;","map":null,"metadata":{},"sourceType":"module"}