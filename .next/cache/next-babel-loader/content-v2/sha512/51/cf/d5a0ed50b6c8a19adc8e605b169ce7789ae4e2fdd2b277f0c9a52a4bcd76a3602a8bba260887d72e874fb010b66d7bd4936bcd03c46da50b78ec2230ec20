{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport PostingForm from '@components/write/PostingForm';\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport ConfirmPost from '@containers/write/ConfirmPost';\nimport useInput from '@hooks/useInput';\nimport PostBody from '@components/write/PostBody';\nimport wrapper from '@store/configureStore';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport { LOAD_USER_REQUSET } from '@reducers/user';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport DropImage from '@components/write/DropImage';\nimport Head from 'next/head';\nimport LoadingFilter from '@components/layout/LoadingFilter';\n\nconst Posting = ({\n  post = null\n}) => {\n  const {\n    user\n  } = useSelector(state => state.user);\n  const {\n    writeSuccess\n  } = useSelector(state => state.post);\n  const loading = useSelector(state => state.loading);\n  const router = useRouter();\n  const [title, onChangeTitle] = useInput(post ? post.title : '');\n  const [body, onChangeBody, setBody] = useInput(post ? post.body : '');\n  const {\n    0: newImage,\n    1: setNewImage\n  } = useState('');\n\n  const uploadImage = async file => {\n    if (!file) return;\n    if (file.size > 1024 * 1024 * 10) return;\n    const fileTypeRegex = /^image\\/(.*?)/;\n    if (!fileTypeRegex.test(file.type)) return;\n    const formData = new FormData();\n    await formData.append('image', file);\n    await axios.post(`/post/uploadImage`, formData).then(res => {\n      setNewImage(`![](${res.data})`);\n    });\n  };\n\n  const onPasteImage = file => {\n    if (!file) return;\n    uploadImage(file);\n  };\n\n  useEffect(() => {\n    if (!user) {\n      router.back();\n    }\n\n    if (writeSuccess > -1) {\n      router.push(`/post/${writeSuccess}`);\n    }\n  }, [writeSuccess]);\n  useEffect(() => {\n    if (newImage && body.indexOf(newImage) === -1) setBody(body + newImage);\n    return () => {\n      setNewImage('');\n    };\n  }, [body, newImage]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(Head, {\n      children: /*#__PURE__*/_jsx(\"title\", {\n        children: post ? '글 수정' : '새 글'\n      })\n    }), loading.WRITE_POST_REQUEST && /*#__PURE__*/_jsx(LoadingFilter, {}), /*#__PURE__*/_jsxs(PostingContainer, {\n      children: [/*#__PURE__*/_jsxs(React.Fragment, {\n        children: [/*#__PURE__*/_jsx(PostingForm, {\n          isEditingId: post ? post.id : 0,\n          category: post === null || post === void 0 ? void 0 : post.categoryPosts,\n          title: title,\n          onChangeTitle: onChangeTitle,\n          body: body,\n          onChangeBody: onChangeBody,\n          uploadImage: uploadImage\n        }), /*#__PURE__*/_jsx(DropImage, {\n          onPasteImage: onPasteImage\n        })]\n      }), /*#__PURE__*/_jsx(PostBody, {\n        className: \"preview\",\n        title: title,\n        body: body\n      })]\n    }), /*#__PURE__*/_jsx(ConfirmPost, {\n      title: title,\n      post: post\n    })]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_REQUSET\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  return {\n    props: {\n      category: context.query.category ? context.query.category : ''\n    }\n  };\n});\nexport default Posting;\nexport const PostingContainer = styled.div`\n\twidth: 100%;\n\tmax-width: 1320px;\n\tpadding: 40px 20px;\n\tdisplay: flex;\n\n\t& > div {\n\t\twidth: 50%;\n\t\theight: calc(100vh - 120px);\n\t}\n\n\t@media screen and (max-width: 1000px) {\n\t\t& > div {\n\t\t\twidth: 100%;\n\n\t\t\t&:nth-child(2) {\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t}\n\t}\n\n\t@media screen and (max-width: 700px) {\n\t\tpadding: 0;\n\t\theight: calc(100vh - 40px);\n\n\t\t& > div {\n\t\t\theight: 100%;\n\t\t\tbox-shadow: none;\n\t\t}\n\t}\n`;","map":null,"metadata":{},"sourceType":"module"}