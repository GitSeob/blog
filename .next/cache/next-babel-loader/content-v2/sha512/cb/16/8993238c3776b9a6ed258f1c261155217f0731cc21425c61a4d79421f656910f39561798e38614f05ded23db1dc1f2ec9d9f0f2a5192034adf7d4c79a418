{"ast":null,"code":"import { loadingStart, loadingEnd } from '@reducers/loading';\nimport { LOGIN_REQUEST, loginAsync, LOAD_USER_REQUSET, loadUserAsync } from '@reducers/user';\nimport axios from 'axios';\nimport { call, all, fork, takeLatest, put, takeEvery } from 'redux-saga/effects';\n\nasync function loadUserAPI() {\n  return await axios.get('/user');\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI);\n    yield put(loadUserAsync.success(result.data));\n  } catch (error) {\n    console.error(error);\n    yield put(loadUserAsync.failure(error));\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUSET, loadUser);\n}\n\nasync function loginAPI(loginData) {\n  return await axios.post(`/user`, loginData);\n}\n\nfunction* login(action) {\n  yield put(loadingStart(action.type));\n\n  try {\n    const result = yield call(loginAPI, action.payload);\n    yield put(loginAsync.success(result.data));\n  } catch (error) {\n    console.error(error);\n    yield put(loginAsync.failure(error));\n  }\n\n  yield put(loadingEnd(action.type));\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLoadUser)]);\n}","map":null,"metadata":{},"sourceType":"module"}