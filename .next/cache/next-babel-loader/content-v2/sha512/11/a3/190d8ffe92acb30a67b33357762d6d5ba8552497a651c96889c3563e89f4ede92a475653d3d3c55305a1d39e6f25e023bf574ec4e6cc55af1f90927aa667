{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { DateP } from '@styles/default';\nimport Categories from '@containers/share/Categories';\nimport PostBody from '@components/write/PostBody';\nimport wrapper from '@store/configureStore';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport { LOAD_USER_REQUSET } from '@reducers/user';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/dist/client/router';\nimport { LOAD_POST_REQUEST } from '@reducers/post';\nimport Head from 'next/head';\nimport Error from '@pages/_error';\nimport PostTitle from '@components/post/PostTitle';\nimport LoadingFilter from '@components/layout/LoadingFilter';\nimport dynamic from 'next/dynamic';\nimport styled from 'styled-components';\nimport { DefaultBox } from '@styles/default';\nconst Disqus = dynamic(() => import('@components/post/Disqus'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('@components/post/Disqus')],\n    modules: ['@components/post/Disqus']\n  }\n});\n\nconst PostPage = () => {\n  const {\n    post,\n    isRemovedPost\n  } = useSelector(state => state.post);\n  const {\n    user\n  } = useSelector(state => state.user);\n  const loading = useSelector(state => state.loading);\n  const router = useRouter();\n  useEffect(() => {\n    if (isRemovedPost) {\n      alert('포스트가 삭제되었습니다.');\n      router.push('/');\n    }\n  }, [isRemovedPost]);\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [loading.REMOVE_POST_REQUEST && /*#__PURE__*/_jsx(LoadingFilter, {}), post ? /*#__PURE__*/_jsxs(Container, {\n      children: [/*#__PURE__*/_jsxs(Head, {\n        children: [/*#__PURE__*/_jsx(\"title\", {\n          children: post.title\n        }), /*#__PURE__*/_jsx(\"meta\", {\n          name: \"description\",\n          content: post.description\n        })]\n      }), /*#__PURE__*/_jsx(PostTitle, {\n        title: post.title,\n        id: post.id,\n        isUser: user && true\n      }), /*#__PURE__*/_jsx(DateP, {\n        children: dayjs(post.createdAt).format('YYYY년 MM월 DD일')\n      }), /*#__PURE__*/_jsx(Categories, {\n        categories: post.categoryPosts,\n        aflg: false\n      }), post.thumbnail && post.body.indexOf(post.thumbnail) === -1 && /*#__PURE__*/_jsx(\"img\", {\n        src: post.thumbnail\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"bodyContainer\",\n        children: /*#__PURE__*/_jsx(PostBody, {\n          setTitle: false,\n          body: post.body\n        })\n      }), /*#__PURE__*/_jsx(Disqus, {\n        id: post.id\n      })]\n    }) : /*#__PURE__*/_jsx(Error, {\n      statusCode: 404\n    })]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_REQUSET\n  });\n\n  if (context.params) {\n    context.store.dispatch({\n      type: LOAD_POST_REQUEST,\n      payload: context.params.id\n    });\n  }\n\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  return {\n    props: {\n      category: context.query.category ? context.query.category : ''\n    }\n  };\n});\nexport default PostPage;\nconst Container = styled(DefaultBox)`\n\tpadding: 40px 20px;\n\n\t& > p {\n\t\tmargin: 1rem 0 1rem 0;\n\t}\n\t& > img {\n\t\tmargin-top: 2rem;\n\t\twidth: 100%;\n\t}\n\n\t& > div.bodyContainer {\n\t\tbackground: #fff;\n\t\tbox-shadow: 0 0.06875rem 0.1875rem rgba(90, 97, 105, 0.1), 0 0.0375rem 0.40625rem rgba(90, 97, 105, 0.1);\n\t}\n\n\t& > #disqus_thread {\n\t\tmargin-top: 2rem;\n\t\tpadding: 1rem;\n\t\tbackground: #fff;\n\t\tbox-shadow: 0 0.06875rem 0.1875rem rgba(90, 97, 105, 0.1), 0 0.0375rem 0.40625rem rgba(90, 97, 105, 0.1);\n\t}\n\n\t#help-notice {\n\t\tdisplay: none;\n\t}\n`;","map":null,"metadata":{},"sourceType":"module"}