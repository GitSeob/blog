{"ast":null,"code":"import { loadCategoriesAsync, loadPostsAsync } from '@reducers/posts';\nimport axios from 'axios';\nimport { call, all, fork, takeLatest, put, select } from 'redux-saga/effects';\n\nasync function loadCategoriesAPI(postData) {\n  return await axios.get(`/category`, postData);\n}\n\nfunction* loadCategories(action) {\n  try {\n    const result = yield call(loadCategoriesAPI, action.payload);\n    yield put(loadCategoriesAsync.success(result));\n  } catch (error) {\n    console.error(error);\n    yield put(loadCategoriesAsync.failure(error));\n  }\n}\n\nfunction* watchloadCategories() {\n  yield takeLatest(loadCategoriesAsync.request, loadCategories);\n}\n\nasync function loadAllPostsAPI(query) {\n  if (query.search) return await axios.get(`/post/search?lastId=${query.lastId || 0}&search=${encodeURIComponent(query.search)}`);\n  return await axios.get(`/post?lastId=${query.lastId || 0}&category=${query.category ? encodeURIComponent(query.category) : '0'}`);\n}\n\nfunction* loadAllPosts(action) {\n  try {\n    const {\n      user\n    } = yield select();\n    if (action.payload) action.payload['user'] = user;\n    const result = yield call(loadAllPostsAPI, action.payload);\n    yield put(loadPostsAsync.success(result));\n  } catch (error) {\n    console.error(error);\n    yield put(loadPostsAsync.failure(error));\n  }\n}\n\nfunction* watchLoadAllPosts() {\n  yield takeLatest(loadPostsAsync.request, loadAllPosts);\n}\n\nexport default function* postsSaga() {\n  yield all([fork(watchloadCategories), fork(watchLoadAllPosts)]);\n}","map":null,"metadata":{},"sourceType":"module"}