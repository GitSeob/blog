{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport dayjs from 'dayjs';\nimport { Container } from './style';\nimport { DateP } from '@styles/default';\nimport Categories from '@containers/share/Categories';\nimport PostBody from '@components/write/PostBody';\nimport wrapper from '@store/configureStore';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport { LOAD_USER_REQUSET } from '@reducers/user';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/dist/client/router';\nimport { LOAD_POST_REQUEST } from '@reducers/post';\nimport Head from 'next/head';\nimport DefaultErrorPage from 'next/error';\nimport PostTitle from '@components/post/PostTitle';\nimport LoadingFilter from '@components/layout/LoadingFilter';\nimport dynamic from 'next/dynamic';\nconst Disqus = dynamic(() => import('@components/post/Disqus'), {\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('@components/post/Disqus')],\n    modules: ['@components/post/Disqus']\n  }\n});\n\nconst PostPage = () => {\n  const {\n    post,\n    isRemovedPost\n  } = useSelector(state => state.post);\n  const {\n    user\n  } = useSelector(state => state.user);\n  const loading = useSelector(state => state.loading);\n  const router = useRouter();\n  useEffect(() => {\n    if (isRemovedPost) {\n      alert('포스트가 삭제되었습니다.');\n      router.push('/');\n    }\n  }, [isRemovedPost]);\n  return __jsx(React.Fragment, null, loading.REMOVE_POST_REQUEST && __jsx(LoadingFilter, null), post ? __jsx(Container, null, __jsx(Head, null, __jsx(\"title\", null, post.title), __jsx(\"meta\", {\n    name: \"description\",\n    content: post.description\n  })), __jsx(PostTitle, {\n    title: post.title,\n    id: post.id,\n    isUser: user && true\n  }), __jsx(DateP, null, dayjs(post.createdAt).format('YYYY년 MM월 DD일')), __jsx(Categories, {\n    categories: post.categoryPosts,\n    aflg: false\n  }), post.thumbnail && post.body.indexOf(post.thumbnail) === -1 && __jsx(\"img\", {\n    src: post.thumbnail\n  }), __jsx(\"div\", {\n    className: \"bodyContainer\"\n  }, __jsx(PostBody, {\n    setTitle: false,\n    body: post.body\n  })), __jsx(Disqus, {\n    id: post.id\n  })) : __jsx(DefaultErrorPage, {\n    statusCode: 404,\n    title: \"\\uC874\\uC7AC\\uD558\\uC9C0 \\uC54A\\uAC70\\uB098 \\uC0AD\\uC81C\\uB41C \\uD3EC\\uC2A4\\uD2B8\\uC785\\uB2C8\\uB2E4.\"\n  }));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_REQUSET\n  });\n\n  if (context.params) {\n    context.store.dispatch({\n      type: LOAD_POST_REQUEST,\n      payload: context.params.id\n    });\n  }\n\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  return {\n    props: {\n      category: context.query.category ? context.query.category : ''\n    }\n  };\n});\nexport default PostPage;","map":null,"metadata":{},"sourceType":"module"}