{"ast":null,"code":"var __jsx = React.createElement;\nimport useInput from '@hooks/useInput';\nimport { LOAD_USER_REQUSET, LOGIN_REQUEST } from '@reducers/user';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\nimport wrapper from '@store/configureStore';\nimport { LoginContainer } from './style';\nimport { useRouter } from 'next/dist/client/router';\nimport axios from 'axios';\nimport LoadingFilter from '@components/layout/LoadingFilter';\n\nconst Login = () => {\n  const [username, onChangeUsername] = useInput('');\n  const [password, onChangePassword] = useInput('');\n  const dispatch = useDispatch();\n  const {\n    user\n  } = useSelector(state => state.user);\n  const loading = useSelector(state => state.loading);\n  const router = useRouter();\n  const onSubmitLogin = React.useCallback(e => {\n    e.preventDefault();\n    if (username.length < 4 || password.length < 8) return;\n    dispatch({\n      type: LOGIN_REQUEST,\n      payload: {\n        username,\n        password\n      }\n    });\n  }, [username, password]);\n  React.useEffect(() => {\n    if (user) router.push('/');\n  }, [user]);\n  return __jsx(React.Fragment, null, loading.LOGIN_REQUEST && __jsx(LoadingFilter, null), __jsx(LoginContainer, null, __jsx(\"div\", null, __jsx(\"img\", {\n    src: \"/ogImage.png\"\n  }), __jsx(\"form\", {\n    onSubmit: onSubmitLogin\n  }, __jsx(\"div\", null, __jsx(\"label\", null, \"ID\", __jsx(\"input\", {\n    type: \"text\",\n    placeholder: \"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    value: username,\n    onChange: onChangeUsername\n  }))), __jsx(\"div\", null, __jsx(\"label\", null, \"PASSWORD\", __jsx(\"input\", {\n    type: \"password\",\n    placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",\n    autoComplete: \"off\",\n    value: password,\n    onChange: onChangePassword\n  }))), __jsx(\"input\", {\n    type: \"submit\",\n    value: \"LOGIN\"\n  })))));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_REQUSET\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default Login;","map":null,"metadata":{},"sourceType":"module"}