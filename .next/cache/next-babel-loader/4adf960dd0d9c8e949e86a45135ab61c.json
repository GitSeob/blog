{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useCallback } from 'react';\nimport { ThumbnailBox } from './style';\nimport axios from 'axios';\n\nconst SetThumbnail = ({\n  thumbnails,\n  tnIndex,\n  removeThumbnail,\n  setTnIndex,\n  addThumbnail\n}) => {\n  const imageInput = useRef();\n  const onClickImageButton = useCallback(() => {\n    imageInput.current.click();\n  }, []);\n  const onChangeImg = useCallback(async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    if (file.size > 1024 * 1024 * 10) return;\n    const fileTypeRegex = /^image\\/(.*?)/;\n    if (!fileTypeRegex.test(file.type)) return;\n    const formData = new FormData();\n    await formData.append('image', file);\n    await axios.post(`/post/uploadImage`, formData).then(res => {\n      addThumbnail(res.data);\n    });\n  }, []);\n  return __jsx(ThumbnailBox, null, __jsx(\"div\", {\n    className: \"paddingBox\"\n  }), __jsx(\"div\", {\n    className: \"buttonBox\"\n  }, __jsx(\"div\", {\n    onClick: onClickImageButton\n  }, __jsx(\"input\", {\n    type: \"file\",\n    accept: \".gif, .jpg, .png\",\n    ref: imageInput,\n    onChange: onChangeImg,\n    style: {\n      display: 'none'\n    }\n  }), \"\\uD30C\\uC77C\\uCC3E\\uAE30\"), thumbnails.length > 0 && __jsx(\"div\", {\n    onClick: removeThumbnail\n  }, \"\\uC81C\\uAC70\\uD558\\uAE30\")), __jsx(\"div\", {\n    className: \"imageBox\",\n    style: {\n      transform: `translateX(-${100 * tnIndex}%)`\n    }\n  }, thumbnails && thumbnails.map((img, i) => __jsx(\"img\", {\n    key: i,\n    src: img\n  }))), tnIndex > 0 && __jsx(\"button\", {\n    className: \"left\",\n    onClick: () => {\n      setTnIndex(tnIndex - 1);\n    }\n  }, __jsx(\"img\", {\n    src: \"/arrow.svg\",\n    alt: \"\"\n  })), tnIndex < thumbnails.length - 1 && __jsx(\"button\", {\n    className: \"right\",\n    onClick: () => {\n      setTnIndex(tnIndex + 1);\n    }\n  }, __jsx(\"img\", {\n    src: \"/arrow.svg\",\n    alt: \"\"\n  })));\n};\n\nexport default SetThumbnail;","map":null,"metadata":{},"sourceType":"module"}