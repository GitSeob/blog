{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(writePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchWritePost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { call, all, fork, takeLatest, put } from 'redux-saga/effects';\nimport { loadPostAsync, writePostAsync, removePostAsync } from '@reducers/post';\nimport { loadingEnd, loadingStart } from '@reducers/loading';\nimport { CLOSE_CONFIRM_POST } from '@reducers/posting';\n\nfunction removePostAPI(_x) {\n  return _removePostAPI.apply(this, arguments);\n}\n\nfunction _removePostAPI() {\n  _removePostAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n    return _regeneratorRuntime.wrap(function _callee$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return axios[\"delete\"](\"/post/\".concat(id));\n\n          case 2:\n            return _context8.abrupt(\"return\", _context8.sent);\n\n          case 3:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _removePostAPI.apply(this, arguments);\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return put(loadingStart(action.type));\n\n        case 2:\n          _context.prev = 2;\n          _context.next = 5;\n          return call(removePostAPI, action.payload);\n\n        case 5:\n          result = _context.sent;\n          _context.next = 8;\n          return put(removePostAsync.success(result.data));\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](2);\n          console.error(_context.t0);\n          _context.next = 15;\n          return put(removePostAsync.failure(_context.t0));\n\n        case 15:\n          _context.next = 17;\n          return put(loadingEnd(action.type));\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 10]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(removePostAsync.request, removePost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction writePostAPI(_x2) {\n  return _writePostAPI.apply(this, arguments);\n}\n\nfunction _writePostAPI() {\n  _writePostAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(postData) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!postData.isEditingId) {\n              _context9.next = 6;\n              break;\n            }\n\n            _context9.next = 3;\n            return axios.patch(\"/post/\".concat(postData.isEditingId), postData);\n\n          case 3:\n            return _context9.abrupt(\"return\", _context9.sent);\n\n          case 6:\n            _context9.next = 8;\n            return axios.post(\"/post\", postData);\n\n          case 8:\n            return _context9.abrupt(\"return\", _context9.sent);\n\n          case 9:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _writePostAPI.apply(this, arguments);\n}\n\nfunction writePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function writePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return put(loadingStart(action.type));\n\n        case 2:\n          _context3.prev = 2;\n          _context3.next = 5;\n          return call(writePostAPI, action.payload);\n\n        case 5:\n          result = _context3.sent;\n          result.data.isEdited = true;\n          _context3.next = 9;\n          return put(writePostAsync.success(result.data));\n\n        case 9:\n          _context3.next = 18;\n          break;\n\n        case 11:\n          _context3.prev = 11;\n          _context3.t0 = _context3[\"catch\"](2);\n          console.error(_context3.t0);\n          _context3.next = 16;\n          return put({\n            type: CLOSE_CONFIRM_POST\n          });\n\n        case 16:\n          _context3.next = 18;\n          return put(writePostAsync.failure(_context3.t0));\n\n        case 18:\n          _context3.next = 20;\n          return put(loadingEnd(action.type));\n\n        case 20:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 11]]);\n}\n\nfunction watchWritePost() {\n  return _regeneratorRuntime.wrap(function watchWritePost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(writePostAsync.request, writePost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction loadPostAPI(_x3) {\n  return _loadPostAPI.apply(this, arguments);\n}\n\nfunction _loadPostAPI() {\n  _loadPostAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return axios.get(\"/post/\".concat(id));\n\n          case 2:\n            return _context10.abrupt(\"return\", _context10.sent);\n\n          case 3:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _loadPostAPI.apply(this, arguments);\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return put(loadingStart(action.type));\n\n        case 2:\n          _context5.prev = 2;\n          _context5.next = 5;\n          return call(loadPostAPI, action.payload);\n\n        case 5:\n          result = _context5.sent;\n          _context5.next = 8;\n          return put(loadPostAsync.success(result.data));\n\n        case 8:\n          _context5.next = 15;\n          break;\n\n        case 10:\n          _context5.prev = 10;\n          _context5.t0 = _context5[\"catch\"](2);\n          console.error(_context5.t0);\n          _context5.next = 15;\n          return put(loadPostAsync.failure(_context5.t0));\n\n        case 15:\n          _context5.next = 17;\n          return put(loadingEnd(action.type));\n\n        case 17:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[2, 10]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(loadPostAsync.request, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchLoadPost), fork(watchWritePost), fork(watchRemovePost)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":null,"metadata":{},"sourceType":"module"}